#!/usr/bin/env node
import 'source-map-support/register';
import * as cdk from 'aws-cdk-lib';
import * as ec2 from 'aws-cdk/aws-ec2';
import * as ecs from '@aws-cdk/aws-ecs';
import * as ecs_patterns'@aws-cdk/aws-ecs-patterns';
import { MyFargateApplicationStack } from '../lib/my-fargate-application-stack';

const app = new cdk.App();
new MyFargateApplicationStack(app, 'MyFargateApplicationStack', {
  /* If you don't specify 'env', this stack will be environment-agnostic.
   * Account/Region-dependent features and context lookups will not work,
   * but a single synthesized template can be deployed anywhere. */

  /* Uncomment the next line to specialize this stack for the AWS Account
   * and Region that are implied by the current CLI configuration. */
  // env: { account: process.env.CDK_DEFAULT_ACCOUNT, region: process.env.CDK_DEFAULT_REGION },

  /* Uncomment the next line if you know exactly what Account and Region you
   * want to deploy the stack to. */
  // env: { account: '123456789012', region: 'us-east-1' },

/* For more information, see https://docs.aws.amazon.com/cdk/latest/guide/environments.html */

  const vpc = new ec2.vpc(this, "myvpc", {
      maxAzs: 3 //Default is all AZs in region
});

const cluster = new ecs.cluster(this, "mycluster", {
    vpc: vpc
    
});

new ecs_patterns.ApplicationLoadBalancedFargateService(this, "Myfargateservices", {
    cluster: cluster, //Required
    cpu: 512, //Default is 256
    desiredcount: 2, // Default is 1
    taskImageOptions: {
        image: ecs.containerImage.fromRegistry("amazon/amazon-ecs-sample")
    },
    memorylimitMiB: 2048, //Default is 512
    publicloadbalancer: true // Default is false
    });
}       
}